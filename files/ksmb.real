#!/bin/sh
# To be put in the /usr/lib/cups/backend/ 
# Allow Samba kerberized printing on Ubuntu.
# Created by Sam Mousa - July 2009
# Based on code by A. Martins-Melo.
# 2010/03/03: Updated by Andre Dill
# 2010/09/21: Updated by David Ambrose-Griffith
# 2015-02-12: Modified by David Leggett to be run using sudo -u username that that it does not need to run as root
# 2017-03-06: Converted to Puppet 4 by Helen Griffiths
# Debuging
booDebug=1
strDebugFile="/tmp/printlog"
if [ $booDebug -eq 0 ]; then
    output=/dev/null
else
    output=$strDebugFile
fi
id >>$output
# check arguments recieved
if [ $# -eq 0 ]; then
    echo 'network ksmb "Unknown" "Windows Printer via SAMBA with Kerberos support"'
    exit 0
elif [ $# -lt 5 ]; then
    echo "Usage: $0 device-uri job-id user title copies options [file]\n" 
    exit 1
elif [ $# -gt 7 ]; then
    echo "Usage: $0 device-uri job-id user title copies options [file]\n" 
    exit 1
fi
DEVICE_URI=$1
# Username
strUserName=$3
# Extract Windows printer name and server
strPrinter=`echo $DEVICE_URI | sed 's,k*smb://,,g'`
strServer=`echo $strPrinter | sed 's,/.*$,,g'`
strPrinter=`echo $strPrinter | sed 's,.*/,,g'`
# fix a space in printer name
strPrinter=`echo $strPrinter | sed 's,%20,\\\ ,g'`
# Set environment variable to ticket cache of user.
strTicketName=/tmp/krb5cc_`id -u "$strUserName"`
KRB5CCNAME=`ls $strTicketName* -ltr | tail -n1 | awk '{print $NF}'`
# Debugging:
if [ $booDebug -eq 1 ]; then
    echo "Printer: $strPrinter"      >> $output
    echo "Server: $strServer"        >> $output
    echo "Ticket cache: $KRB5CCNAME" >> $output
    echo "User Name: $strUserName" >> $output
fi
# Export it so smbclient uses it.
export KRB5CCNAME
# data file 
strTmpFile=/tmp/print.$$
if [ $# -eq 6 ]; then
    # There are 6 arguments input will follow on stdin.
    echo "Six arguments received. Tempfile created at $strTmpFile." >> $output
    cat - > $strTmpFile
else
    # There are 7 arguments, the 7th is the filename.
    echo "Seven arguments received." >> $output
    if [ -f $7 ]; then
        cp $7 $strTmpFile
    fi
fi
# print the file
chown $strUserName $strTmpFile >>$output 2>&1
sleep 1
ls -la $strTmpFile >>$output
strPrintCommand="smbclient //$strServer/$strPrinter -k -E -U \"$strUserName\" -c \"print $strTmpFile\""
echo "Print command used is: $strPrintCommand" >> $output
#`su -c "$strPrintCommand" $strUserName`
eval $strPrintCommand
intReturn=$?
echo "Return code from smbclient: $intReturn" >> $output
# clean up
if [ -f $strTmpFile ]; then
    rm $strTmpFile
fi
unset KRB5CCNAME
# Hw do we exit?
if [ $intReturn -eq 0 ]; then
    # If smbclient finished successfully return 0.
    echo "Exiting with exit code 0." >> $output
    exit 0
else
    # In all other cases return error code 1 which means Failed -- Note: this is not the same as returning $intReturn!
    echo "Exiting with exit code 1." >> $output
    echo "Note: If smbclient reports permission errors on the ticket cache" >> $output
    echo "      check the permissions on this file to make sure it is run " >> $output
    echo "      as root." >> $output
    echo "Dumping environment." >> $output
    env >> $output
    exit 1
fi
# END
